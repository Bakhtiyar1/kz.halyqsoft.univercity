/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package kmeans;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 *
 * @author 24160
 */
public class Main {

    static FileInputStream fstream;
    static Map<Integer, ArrayList> numberSet;

    /**
     * @param args the command line arguments
     */
    public static double getDistance(ArrayList<Double> star, ArrayList<Double> obj) {
        double distance = 0;
        for (int i = 0; i < star.size(); i++) {
            distance += (Math.pow((obj.get(i) - star.get(i)), 2));
        }
        distance = Math.sqrt(distance);
        return distance;
    }

    public static double getMinFromCouple(ArrayList<Double> s, ArrayList<Double> star1, ArrayList<Double> star2) {

        double min = 0;

        double distance1 = 0;
        for (int i = 0; i < s.size(); i++) {
            distance1 += (Math.pow((star1.get(i) - s.get(i)), 2));
        }

        double distance2 = 0;
        for (int i = 0; i < s.size(); i++) {
            distance2 += (Math.pow((star2.get(i) - s.get(i)), 2));
        }

        min = distance1;

        if (distance2 < distance1) {
            min = distance2;
        }

        return min;
    }

    public static Map<Integer, ArrayList> solveLab3() {

        Map<Integer, ArrayList> clusters = new HashMap<Integer, ArrayList>();

        //first
        clusters.put(0, numberSet.get(0));

        // second
        List<Double> orderList = new ArrayList();
        for (int i = 0; i < numberSet.size(); i++) {
            double calculate1 = getDistance(clusters.get(0), numberSet.get(i));
            orderList.add(calculate1);
        }
        Collections.sort(orderList);


        for (int i = 0; i < orderList.size(); i++) {
            double calculate1 = getDistance(clusters.get(0), numberSet.get(i));
            if (calculate1 == orderList.get(orderList.size() - 1)) {
                clusters.put(1, numberSet.get(i));
            }
        }

        //third
        List<Double> mins = new ArrayList();
        for (int i = 0; i < numberSet.size(); i++) {
            double calculate1 = getMinFromCouple(numberSet.get(i), clusters.get(0), clusters.get(1));
            mins.add(calculate1);
        }
        Collections.sort(mins);

        double P = 0.5;

        for (int i = 0; i < mins.size(); i++) {
            double calculate1 = getMinFromCouple(numberSet.get(i), clusters.get(0), clusters.get(1));
            if (calculate1 == mins.get(mins.size() - 1)) {
                if (mins.get(mins.size() - 1) >= (P * orderList.get(orderList.size() - 1))) {
                    clusters.put(2, numberSet.get(i));
                }
            }
        }

        return clusters;
    }

    public static void main(String[] args) throws FileNotFoundException, IOException {
        int iterNumber = 10;

        boolean firstIterCheck = true;
        int column = 14, row = 61;
        numberSet = new HashMap<Integer, ArrayList>();
        Map<Integer, ArrayList> firstCluster = new HashMap<Integer, ArrayList>();
        Map<Integer, ArrayList> secondCluster = new HashMap<Integer, ArrayList>();
        Map<Integer, ArrayList> thirdCluster = new HashMap<Integer, ArrayList>();

        ArrayList<Double> centerFirst = new ArrayList();
        ArrayList<Double> oldCenterFirst = new ArrayList();

        ArrayList<Double> centerSecond = new ArrayList();
        ArrayList<Double> oldCenterSecond = new ArrayList();

        ArrayList<Double> centerThird = new ArrayList();
        ArrayList<Double> oldCenterThird = new ArrayList();

        Map<Integer, Double> saveF = new HashMap<Integer, Double>();

        fstream = new FileInputStream("C:\\Users\\24160\\Downloads\\info.txt");
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        String strLine;
        int counter = 0;
        while ((strLine = br.readLine()) != null) {
            String[] tokens = strLine.split(" ");
            ArrayList<Double> value = new ArrayList();
            for (String token : tokens) {
                value.add(Double.parseDouble(token));
            }
            numberSet.put(counter, value);
            counter++;
        }

        Map<Integer, ArrayList> solveLab3 = solveLab3();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < solveLab3.size(); j++) {
                if (numberSet.get(i).equals(solveLab3.get(j))) {
                    System.out.println("HELLO MAP: " + i + ") " + solveLab3.get(j));
                }
            }
        }

        System.out.println("");
        System.out.println("");

        for (int i = 0; i < row; i++) {
            System.out.println(numberSet.get(i) + " ");
            for (int j = 0; j < solveLab3.size(); j++) {
                if (numberSet.get(i).equals(solveLab3.get(j))) {
                    System.out.println("");
                }
            }
        }

        centerFirst = solveLab3.get(0);
        centerSecond = solveLab3.get(1);
        centerThird = solveLab3.get(2);

        for (int j = 0; j < iterNumber; j++) {
            int counter1 = 0, counter2 = 0, counter3 = 0;
            for (int i = 0; i < numberSet.size(); i++) {
                double calculate1 = getDistance(centerFirst, numberSet.get(i));
                double calculate2 = getDistance(centerSecond, numberSet.get(i));
                double calculate3 = getDistance(centerThird, numberSet.get(i));

                List<Double> orderList = new ArrayList();
                orderList.add(calculate1);
                orderList.add(calculate2);
                orderList.add(calculate3);

                Collections.sort(orderList);

                if (orderList.get(0) == calculate1) {
                    firstCluster.put(counter1, numberSet.get(i));
                    counter1++;
                } else if (orderList.get(0) == calculate2) {
                    secondCluster.put(counter2, numberSet.get(i));
                    counter2++;
                } else if (orderList.get(0) == calculate3) {
                    thirdCluster.put(counter3, numberSet.get(i));
                    counter3++;
                }
            }

            double F1 = 0;
            for (int h = 0; h < firstCluster.size(); h++) {
                F1 += getDistance(centerFirst, firstCluster.get(h));
            }
            double F2 = 0;
            for (int h = 0; h < secondCluster.size(); h++) {
                F2 += getDistance(centerSecond, secondCluster.get(h));
            }
            double F3 = 0;
            for (int h = 0; h < thirdCluster.size(); h++) {
                F3 += getDistance(centerThird, thirdCluster.get(h));
            }

            double F = F1 + F2 + F3;
            saveF.put(j, F);
            System.out.println("F: " + j + ") " + F);

            ArrayList<Double> saveSum = new ArrayList<Double>();
            for (int c = 0; c < column; c++) {
                double sum = 0;
                for (int i = 0; i < firstCluster.size(); i++) {
                    ArrayList<Double> a = firstCluster.get(i);
                    sum += a.get(c);
                }
                sum = sum / firstCluster.size();
                saveSum.add(sum);
            }
            centerFirst = saveSum;

            saveSum = new ArrayList<Double>();
            for (int c = 0; c < column; c++) {
                double sum = 0;
                for (int i = 0; i < secondCluster.size(); i++) {
                    ArrayList<Double> a = secondCluster.get(i);
                    sum += a.get(c);
                }
                sum = sum / secondCluster.size();
                saveSum.add(sum);
            }
            centerSecond = saveSum;

            saveSum = new ArrayList<Double>();
            for (int c = 0; c < column; c++) {
                double sum = 0;
                for (int i = 0; i < thirdCluster.size(); i++) {
                    ArrayList<Double> a = thirdCluster.get(i);
                    sum += a.get(c);
                }
                sum = sum / thirdCluster.size();
                saveSum.add(sum);
            }
            centerThird = saveSum;

            if (oldCenterFirst.equals(centerFirst) && oldCenterSecond.equals(centerSecond) && oldCenterThird.equals(centerThird)) {
                System.out.println("Iteration has been stopped at " + j);
                break;
            }

            oldCenterFirst = centerFirst;
            oldCenterSecond = centerSecond;
            oldCenterThird = centerThird;

            firstIterCheck = false;
            System.out.println("Iteration #" + j);
            System.out.println("First Cluster: ");
            for (int i = 0; i < firstCluster.size(); i++) {
                System.out.println(firstCluster.get(i));
            }
            System.out.println("Second Cluster: ");
            for (int i = 0; i < secondCluster.size(); i++) {
                System.out.println(secondCluster.get(i));
            }
            System.out.println("Third Cluster: ");
            for (int i = 0; i < thirdCluster.size(); i++) {
                System.out.println(thirdCluster.get(i));
            }
            System.out.println("");
        }

        double min = 1000000;
        for (int i = 0; i < saveF.size(); i++) {
            if (saveF.get(i) < min) {
                min = saveF.get(i);
            }
        }

        for (Entry<Integer, Double> entry : saveF.entrySet()) {
            if (entry.getValue() == min) {
                System.out.println("The most preferable answer was at iteration #" + entry.getKey());
            }
        }
    }
}
